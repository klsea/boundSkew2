# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
View(d0)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
View(d0)
View(score_avi)
knitr::opts_chunk$set(echo = TRUE)
library(kableExtra)
source('../06_graph_affect.R')
summary(affectaov)
# graph affective
# 11.11.19 KLS
# load required packages
library(here)
library(ggplot2)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'isolate_measure.R'))
source(here('scr', 'SummarySE.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
#d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Serene", dict)
d1 <- score_avi(d0)
# Graph means
d2 <- cbind(colMeans(d1), apply(d1, 2, sd), apply(d1, 2, sd)/sqrt(nrow(d1)))
d2 <- d2[3:nrow(d2),]
colnames(d2) <- c('Mean', 'SD', 'SE')
names <- rownames(d2); rownames(d2) <- NULL
d2 <- cbind(names, d2)
d2 <- data.frame(d2)
d2$Mean <- as.numeric(as.character(d2$Mean))
d2$SD <- as.numeric(as.character(d2$SD))
d2$SE <- as.numeric(as.character(d2$SE))
d2$names <- c('low arousal - positive', 'high arousal - positive', 'low arousal',
'low arousal - negative', 'high arousal','high arousal -negative')
d2$names <- factor(d2$names, levels =c('low arousal', 'low arousal - negative', 'low arousal - positive',
'high arousal','high arousal -negative', 'high arousal - positive'))
affect <- ggplot(d2, aes(names, Mean, fill = names)) + geom_bar(stat='identity') + annotate("text", x=1, y=0, label="Never") +
annotate("text", x=1, y=5, label="All the time") +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none', axis.text.x  = element_text(angle=90, vjust=0.5, size = 10)) + xlab("Affect") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=3.5))
# ANOVA
d3 <- gather(d1, condition, rating, hap:ha)
affectaov <- aov(rating ~ condition + Error(ID), d3)
summary(affectaov)
ttable <- pariedttable(d3,colnames(d1)[3:8], 1)
ptable <- pariedttable(d3,colnames(d1)[3:8], 2)
# ANOVA
d3 <- gather(d1, condition, rating, hap:ha)
affectaov <- aov(rating ~ condition + Error(ID), d3)
summary(affectaov)
ttable <- pariedttable(d3,colnames(d1)[3:8], 1)
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
ttable <- pariedttable(d3,colnames(d1)[3:8], 1)
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
ttable <- pariedttable(d3,colnames(d1)[3:8], 1)
ttable <- pairedttable(d3,colnames(d1)[3:8], 1)
View(d3)
View(d1)
ttable <- pairedttable(d3,colnames(d1)[3:8])
View(pairedttable)
View(pairedttable)
pairedttable <- function(data, var.names){
# data is a data frame in wide format with only an ID column in front of columns of interest
# var.names is a vector with the names of the columns you want to compare
dt <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d1 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d2 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d3 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
count = 0
for (l1 in 1:(length(var.names)-1)){
print(l1)
var1 = var.names[l1]
print(var1)
for (l2 in (l1+1):length(var.names)) {
print(l2)
var2 = var.names[l2]
print(var2)
t <- t.test(data[,l1+1], data[,l2+1], paired = TRUE, na.action=na.omit)
print(t)
dt[l1, l2-1] <- round(t$statistic,2)
d1[l1, l2-1] <- paste0('[', round(t$conf.int[1],2), ',', round(t$conf.int[2],2), ']')
d2[l1, l2-1] <- round(t$p.value, 4)
d3[l1, l2-1] <- t$parameter
count = count+1
}
}
#criticalp = 0.05/count
row.names(dt) <- var.names
colnames(dt) <- var.names[2:length(var.names)]
row.names(d1) <- var.names
colnames(d1) <- var.names[2:length(var.names)]
row.names(d2) <- var.names
colnames(d2) <- var.names[2:length(var.names)]
row.names(d3) <- var.names
colnames(d3) <- var.names[2:length(var.names)]
output <- list('tval' = dt, 'CI' = d1, 'p values' = d2, 'df' = d3)
return(output)
#ifelse(output == 1, return(dt), ifelse(output==2, return(d2), return(d3)))
}
#data <- d1
data <- d3
var.names <- colnames(d3)[3:8]
View(d3)
var.names <- colnames(d1)[3:8]
# data is a data frame in wide format with only an ID column in front of columns of interest
# var.names is a vector with the names of the columns you want to compare
dt <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d1 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d2 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d3 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
count = 0
for (l1 in 1:(length(var.names)-1)){
print(l1)
var1 = var.names[l1]
print(var1)
for (l2 in (l1+1):length(var.names)) {
print(l2)
var2 = var.names[l2]
print(var2)
t <- t.test(data[,l1+1], data[,l2+1], paired = TRUE, na.action=na.omit)
print(t)
dt[l1, l2-1] <- round(t$statistic,2)
d1[l1, l2-1] <- paste0('[', round(t$conf.int[1],2), ',', round(t$conf.int[2],2), ']')
d2[l1, l2-1] <- round(t$p.value, 4)
d3[l1, l2-1] <- t$parameter
count = count+1
}
}
for (l1 in 1:(length(var.names)-1)){
print(l1)
var1 = var.names[l1]
print(var1)
for (l2 in (l1+1):length(var.names)) {
print(l2)
var2 = var.names[l2]
print(var2)
t <- t.test(data[,l1+1], data[,l2+1], paired = TRUE, na.action=na.omit)
print(t)
#dt[l1, l2-1] <- round(t$statistic,2)
#d1[l1, l2-1] <- paste0('[', round(t$conf.int[1],2), ',', round(t$conf.int[2],2), ']')
#d2[l1, l2-1] <- round(t$p.value, 4)
#d3[l1, l2-1] <- t$parameter
#count = count+1
}
}
print(var2)
for (l1 in 1:(length(var.names)-1)){
print(l1)
var1 = var.names[l1]
print(var1)
for (l2 in (l1+1):length(var.names)) {
print(l2)
var2 = var.names[l2]
print(var2)
#t <- t.test(data[,l1+1], data[,l2+1], paired = TRUE, na.action=na.omit)
#print(t)
#dt[l1, l2-1] <- round(t$statistic,2)
#d1[l1, l2-1] <- paste0('[', round(t$conf.int[1],2), ',', round(t$conf.int[2],2), ']')
#d2[l1, l2-1] <- round(t$p.value, 4)
#d3[l1, l2-1] <- t$parameter
#count = count+1
}
}
data
View(d1)
# load required packages
library(here)
library(ggplot2)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'isolate_measure.R'))
source(here('scr', 'SummarySE.R'))
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
#d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Serene", dict)
d1 <- score_avi(d0)
# Graph means
d2 <- cbind(colMeans(d1), apply(d1, 2, sd), apply(d1, 2, sd)/sqrt(nrow(d1)))
d2 <- d2[3:nrow(d2),]
colnames(d2) <- c('Mean', 'SD', 'SE')
names <- rownames(d2); rownames(d2) <- NULL
d2 <- cbind(names, d2)
d2 <- data.frame(d2)
d2$Mean <- as.numeric(as.character(d2$Mean))
d2$SD <- as.numeric(as.character(d2$SD))
d2$SE <- as.numeric(as.character(d2$SE))
d2$names <- c('low arousal - positive', 'high arousal - positive', 'low arousal',
'low arousal - negative', 'high arousal','high arousal -negative')
d2$names <- factor(d2$names, levels =c('low arousal', 'low arousal - negative', 'low arousal - positive',
'high arousal','high arousal -negative', 'high arousal - positive'))
affect <- ggplot(d2, aes(names, Mean, fill = names)) + geom_bar(stat='identity') + annotate("text", x=1, y=0, label="Never") +
annotate("text", x=1, y=5, label="All the time") +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none', axis.text.x  = element_text(angle=90, vjust=0.5, size = 10)) + xlab("Affect") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=3.5))
# ANOVA
d3 <- gather(d1, condition, rating, hap:ha)
affectaov <- aov(rating ~ condition + Error(ID), d3)
summary(affectaov)
View(d1)
View(d1)
View(pairedttable)
ttable <- pairedttable(d1[3:8],colnames(d1)[3:8])
data <- d1[3:8]
# data is a data frame in wide format with only an ID column in front of columns of interest
# var.names is a vector with the names of the columns you want to compare
dt <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d1 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d2 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d3 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
count = 0
for (l1 in 1:(length(var.names)-1)){
print(l1)
var1 = var.names[l1]
print(var1)
for (l2 in (l1+1):length(var.names)) {
print(l2)
var2 = var.names[l2]
print(var2)
t <- t.test(data[,l1+1], data[,l2+1], paired = TRUE, na.action=na.omit)
print(t)
dt[l1, l2-1] <- round(t$statistic,2)
d1[l1, l2-1] <- paste0('[', round(t$conf.int[1],2), ',', round(t$conf.int[2],2), ']')
d2[l1, l2-1] <- round(t$p.value, 4)
d3[l1, l2-1] <- t$parameter
count = count+1
}
}
#criticalp = 0.05/count
row.names(dt) <- var.names
# graph affective
# 11.11.19 KLS
# load required packages
library(here)
library(ggplot2)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'isolate_measure.R'))
source(here('scr', 'SummarySE.R'))
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
#d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Serene", dict)
d1 <- score_avi(d0)
# Graph means
d2 <- cbind(colMeans(d1), apply(d1, 2, sd), apply(d1, 2, sd)/sqrt(nrow(d1)))
d2 <- d2[3:nrow(d2),]
colnames(d2) <- c('Mean', 'SD', 'SE')
names <- rownames(d2); rownames(d2) <- NULL
d2 <- cbind(names, d2)
d2 <- data.frame(d2)
d2$Mean <- as.numeric(as.character(d2$Mean))
d2$SD <- as.numeric(as.character(d2$SD))
d2$SE <- as.numeric(as.character(d2$SE))
d2$names <- c('low arousal - positive', 'high arousal - positive', 'low arousal',
'low arousal - negative', 'high arousal','high arousal -negative')
d2$names <- factor(d2$names, levels =c('low arousal', 'low arousal - negative', 'low arousal - positive',
'high arousal','high arousal -negative', 'high arousal - positive'))
affect <- ggplot(d2, aes(names, Mean, fill = names)) + geom_bar(stat='identity') + annotate("text", x=1, y=0, label="Never") +
annotate("text", x=1, y=5, label="All the time") +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none', axis.text.x  = element_text(angle=90, vjust=0.5, size = 10)) + xlab("Affect") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=3.5))
# ANOVA
d3 <- gather(d1, condition, rating, hap:ha)
affectaov <- aov(rating ~ condition + E
data <- d1[3:8]
var.names <- colnames(d1)[3:8]
data <- d1[3:8]
# data is a data frame in wide format with only an ID column in front of columns of interest
# var.names is a vector with the names of the columns you want to compare
dt <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d1 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d2 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
d3 <- matrix(nrow = length(var.names), ncol = length(var.names)-1)
count = 0
for (l1 in 1:(length(var.names)-1)){
print(l1)
var1 = var.names[l1]
print(var1)
for (l2 in (l1+1):length(var.names)) {
print(l2)
var2 = var.names[l2]
print(var2)
t <- t.test(data[,l1+1], data[,l2+1], paired = TRUE, na.action=na.omit)
print(t)
dt[l1, l2-1] <- round(t$statistic,2)
d1[l1, l2-1] <- paste0('[', round(t$conf.int[1],2), ',', round(t$conf.int[2],2), ']')
d2[l1, l2-1] <- round(t$p.value, 4)
d3[l1, l2-1] <- t$parameter
count = count+1
}
}
# graph affective
# 11.11.19 KLS
# load required packages
library(here)
library(ggplot2)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'isolate_measure.R'))
source(here('scr', 'SummarySE.R'))
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
# set hard-coded variables
# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
#d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Serene", dict)
d1 <- score_avi(d0)
# Graph means
d2 <- cbind(colMeans(d1), apply(d1, 2, sd), apply(d1, 2, sd)/sqrt(nrow(d1)))
d2 <- d2[3:nrow(d2),]
colnames(d2) <- c('Mean', 'SD', 'SE')
names <- rownames(d2); rownames(d2) <- NULL
d2 <- cbind(names, d2)
d2 <- data.frame(d2)
d2$Mean <- as.numeric(as.character(d2$Mean))
d2$SD <- as.numeric(as.character(d2$SD))
d2$SE <- as.numeric(as.character(d2$SE))
d2$names <- c('low arousal - positive', 'high arousal - positive', 'low arousal',
'low arousal - negative', 'high arousal','high arousal -negative')
d2$names <- factor(d2$names, levels =c('low arousal', 'low arousal - negative', 'low arousal - positive',
'high arousal','high arousal -negative', 'high arousal - positive'))
affect <- ggplot(d2, aes(names, Mean, fill = names)) + geom_bar(stat='identity') + annotate("text", x=1, y=0, label="Never") +
annotate("text", x=1, y=5, label="All the time") +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none', axis.text.x  = element_text(angle=90, vjust=0.5, size = 10)) + xlab("Affect") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=3.5))
# ANOVA
d3 <- gather(d1, condition, rating, hap:ha)
affectaov <- aov(rating ~ condition + Error(ID), d3)
summary(affectaov)
ttable <- pairedttable(d1[c(1,3:8)],colnames(d1)[3:8])
View(ttable)
ttable$`p values`
View(pairedttable)
View(pairedttable)
View(ttable)
View(pairedttable)
# load required packages
library(here)
library(ggplot2)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'isolate_measure.R'))
source(here('scr', 'SummarySE.R'))
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
#d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Serene", dict)
d1 <- score_avi(d0)
# Graph means
d2 <- cbind(colMeans(d1), apply(d1, 2, sd), apply(d1, 2, sd)/sqrt(nrow(d1)))
d2 <- d2[3:nrow(d2),]
colnames(d2) <- c('Mean', 'SD', 'SE')
names <- rownames(d2); rownames(d2) <- NULL
d2 <- cbind(names, d2)
d2 <- data.frame(d2)
d2$Mean <- as.numeric(as.character(d2$Mean))
d2$SD <- as.numeric(as.character(d2$SD))
d2$SE <- as.numeric(as.character(d2$SE))
d2$names <- c('low arousal - positive', 'high arousal - positive', 'low arousal',
'low arousal - negative', 'high arousal','high arousal -negative')
d2$names <- factor(d2$names, levels =c('low arousal', 'low arousal - negative', 'low arousal - positive',
'high arousal','high arousal -negative', 'high arousal - positive'))
affect <- ggplot(d2, aes(names, Mean, fill = names)) + geom_bar(stat='identity') + annotate("text", x=1, y=0, label="Never") +
annotate("text", x=1, y=5, label="All the time") +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none', axis.text.x  = element_text(angle=90, vjust=0.5, size = 10)) + xlab("Affect") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=3.5))
# ANOVA
d3 <- gather(d1, condition, rating, hap:ha)
affectaov <- aov(rating ~ condition + Error(ID), d3)
summary(affectaov)
ttable <- pairedttable(d1[c(1,3:8)],colnames(d1)[3:8])
# Examine correlations with age
agecorr <- corrTableCI(d1[2:8])
#graphs
age_lap <- ggplot(d1, aes(Age, lap)) + geom_point() + geom_smooth(method=lm) +
ggtitle('Low Arousal - Positive')
age_lan <- ggplot(d1, aes(Age, lan)) + geom_point() + geom_smooth(method=lm) +
ggtitle('Low Arousal - Negative')
age_han <- ggplot(d1, aes(Age, han)) + geom_point() + geom_smooth(method=lm) +
ggtitle('High Arousal - Negative')
age_ha <- ggplot(d1, aes(Age, ha)) + geom_point() + geom_smooth(method=lm) +
ggtitle('High Arousal')
#multiplot(age_lap, age_lan, age_ha, age_han, cols = 2)
# load required packages
library(here)
library(ggplot2)
library(tidyr)
# load source functions
source(here('scr', 'isolate_skew.R'))
source(here('scr', 'isolate_measure.R'))
source(here('scr', 'SummarySE.R'))
source(here('scr', 'pairedttable.R'))
source(here('scr', 'corrTableCI.R'))
source(here('scr', 'multiplot.R'))
# load data
dt <- read.csv(here("data", "bound_skew2_data.csv"))
dict <- read.csv(here("data", "bound_skew2_data_dictionary.csv"))
# isolate AVI data
Sys.setlocale('LC_ALL','C')
qs <- as.character(dict$Question)
first <- grep("Enthusiastic", qs)
last <- grep("Lonely", qs)
#last <- grep("Serene", qs)
d0 <- isolate_skew(dt,c(1,2), first:last)
# add labels to AVI data
d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Lonely", dict)
#d0 <- add_correct_avi_labels(d0, "Enthusiastic", "Serene", dict)
d1 <- score_avi(d0)
# Graph means
d2 <- cbind(colMeans(d1), apply(d1, 2, sd), apply(d1, 2, sd)/sqrt(nrow(d1)))
d2 <- d2[3:nrow(d2),]
colnames(d2) <- c('Mean', 'SD', 'SE')
names <- rownames(d2); rownames(d2) <- NULL
d2 <- cbind(names, d2)
d2 <- data.frame(d2)
d2$Mean <- as.numeric(as.character(d2$Mean))
d2$SD <- as.numeric(as.character(d2$SD))
d2$SE <- as.numeric(as.character(d2$SE))
d2$names <- c('low arousal - positive', 'high arousal - positive', 'low arousal',
'low arousal - negative', 'high arousal','high arousal -negative')
d2$names <- factor(d2$names, levels =c('low arousal', 'low arousal - negative', 'low arousal - positive',
'high arousal','high arousal -negative', 'high arousal - positive'))
affect <- ggplot(d2, aes(names, Mean, fill = names)) + geom_bar(stat='identity') + annotate("text", x=1, y=0, label="Never") +
annotate("text", x=1, y=5, label="All the time") +
geom_errorbar(aes(ymin = Mean-SE, ymax = Mean + SE), width = .2, position=position_dodge(.9)) +
theme_minimal() + theme(legend.position = 'none', axis.text.x  = element_text(angle=90, vjust=0.5, size = 10)) + xlab("Affect") + ylab('Average Rating') +
expand_limits(y=c(1,5)) + geom_vline(aes(xintercept=3.5))
affect
